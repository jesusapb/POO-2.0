
package Vista;

import Modelo.ModConexion;
import Modelo.ModConsultasSQL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.swing.table.DefaultTableModel;

/**
 * Esta es la interfaz de Buscador, donde se puede encontrar a cualquier empleado, documento o quizz según el tipo que haya puesto el usuario que 
 * esta buscando.
 * @author Karina Carmona, Antonio Cetzal, Jessica González y Jesús Pacheco.
 * @version 29/11/2018/ProyectoPoo_Acompañamiento
 */
public class VstBuscador extends javax.swing.JFrame {

    /**
     * Creates new form VstBuscador
     */
    public VstBuscador() {
        initComponents();
        txtFormat.setVisible(false);
        lbFormat.setVisible(false);
        txtNombre.setVisible(false);
        lbNombre.setVisible(false);
        btnEfectuar.setVisible(false);
        tabla.setVisible(false);
        TEMP.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtFormat = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        tipo = new javax.swing.JComboBox<>();
        txtNombre = new javax.swing.JTextField();
        TEMP = new javax.swing.JTextField();
        btnEfectuar = new javax.swing.JButton();
        lbFormat = new javax.swing.JLabel();
        lbNombre = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtFormat.setToolTipText("");
        txtFormat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFormatKeyReleased(evt);
            }
        });
        jPanel1.add(txtFormat, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 110, -1));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabla);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 680, 220));

        tipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoger el tipo:", "Documentos", "Quizzes", "Empleados" }));
        tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoActionPerformed(evt);
            }
        });
        jPanel1.add(tipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 120, -1));

        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombreKeyReleased(evt);
            }
        });
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, 310, -1));

        TEMP.setEditable(false);
        TEMP.setBackground(new java.awt.Color(255, 255, 255));
        TEMP.setBorder(null);
        jPanel1.add(TEMP, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 110, 20));

        btnEfectuar.setText("Efectuar");
        jPanel1.add(btnEfectuar, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, -1, -1));

        lbFormat.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbFormat.setText("Buscar o abrir:");
        jPanel1.add(lbFormat, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, -1));

        lbNombre.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbNombre.setText("Texto:");
        jPanel1.add(lbNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 300));

        pack();
    }// </editor-fold>                        
    /**
     * Método que vslida la opción que haya elegido el usuario del comboBox y lo que haya en el campo de texto, para saber si se hace o no visible
     * el botón de efectuar la busqueda.
     * @param evt almacena los datos que se hayan elegido.
     */
    private void txtFormatKeyReleased(java.awt.event.KeyEvent evt) {                                      
        String format = txtFormat.getText().toUpperCase();
        if (format.equals("ABRIR") || format.equals("BUSCAR")) {
            txtNombre.setText(null);
            txtNombre.setVisible(true);
            lbNombre.setVisible(true);
        } else {
            txtNombre.setText(null);
            txtNombre.setVisible(false);
            lbNombre.setVisible(false);
            btnEfectuar.setVisible(false);

            if (tipo.getSelectedItem().equals("Documentos")) {
                tabla.setVisible(true);
                busqueda(txtNombre.getText(), (String) tipo.getSelectedItem());
            }
            if (tipo.getSelectedItem().equals("Quizzes")) {
                tabla.setVisible(true);
                busqueda(txtNombre.getText(), (String) tipo.getSelectedItem());
            }
            if (tipo.getSelectedItem().equals("Empleados")) {
                tabla.setVisible(true);
                busqueda(txtNombre.getText(), (String) tipo.getSelectedItem());
            }

        }
    }                                     

    /**
     * Método que nos ayuda a la visualización de los botones, dependiendo de la opción que haya elegido el usuario.
     * @param evt guarda los datos que se ingresaron.
     */
    private void tipoActionPerformed(java.awt.event.ActionEvent evt) {                                     
        if (tipo.getSelectedItem().equals("Documentos")) {
            tabla.setVisible(true);
            txtFormat.setVisible(true);
            lbFormat.setVisible(true);
            txtFormat.setText(null);
            txtNombre.setVisible(false);
            txtNombre.setText(null);
            lbNombre.setVisible(false);
            btnEfectuar.setVisible(false);
            busqueda(txtNombre.getText(), (String) tipo.getSelectedItem());
        }
        if (tipo.getSelectedItem().equals("Quizzes")) {
            tabla.setVisible(true);
            txtFormat.setVisible(true);
            lbFormat.setVisible(true);
            txtFormat.setText(null);
            txtNombre.setVisible(false);
            txtNombre.setText(null);
            lbNombre.setVisible(false);
            btnEfectuar.setVisible(false);
            busqueda(txtNombre.getText(), (String) tipo.getSelectedItem());
        }
        if (tipo.getSelectedItem().equals("Empleados")) {
            tabla.setVisible(true);
            txtFormat.setVisible(true);
            lbFormat.setVisible(true);
            txtFormat.setText(null);
            txtNombre.setVisible(false);
            txtNombre.setText(null);
            lbNombre.setVisible(false);
            btnEfectuar.setVisible(false);
            busqueda(txtNombre.getText(), (String) tipo.getSelectedItem());
        }
        if (tipo.getSelectedItem().equals("Escoger el tipo:")) {
            txtFormat.setVisible(false);
            txtFormat.setText(null);
            lbFormat.setVisible(false);
            txtNombre.setVisible(false);
            txtNombre.setText(null);
            lbNombre.setVisible(false);
            btnEfectuar.setVisible(false);
            tabla.setVisible(false);
        }
    }                                    
    /**
     * Método que almacena la información del cuadro de texto, y sí tiene algo escrito hace visible el botón de efectuar para que empiece la busqueda.
     * @param evt guarda los datos del usuario seleccionado para posiblemente enviarle un mensaje.
     */
    private void txtNombreKeyReleased(java.awt.event.KeyEvent evt) {                                      
        String texto = txtNombre.getText();
        String valor = (String) tipo.getSelectedItem();
        busqueda(texto, valor);
        if (texto.equals("")) {
            btnEfectuar.setVisible(false);
        }
    }                                     
    
    /**
     * Método que hace las comparaciones, lo que ingresa el usuario con los datos ya establecidos. Abre la interfaz correspondiente.
     * @param evt variable  que mantiene a la espera de una interacción con la tabla. Ayuda a extraer los datos mostrados en la tabla.
     */
    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {                                   
        int row = evt.getY() / tabla.getRowHeight();
        txtNombre.setText("" + tabla.getValueAt(row, 0));
        if (tipo.getSelectedItem().equals("Empleados")) {
            TEMP.setText("" + tabla.getValueAt(row, 5));
        } else {
            TEMP.setText(null);
        }

        if (txtFormat.getText().toUpperCase().equals("BUSCAR")) {
            btnEfectuar.setVisible(false);
        } else if (txtFormat.getText().toUpperCase().equals("ABRIR")) {
            if (TEMP.getText().equals("Administrador")) {
                btnEfectuar.setVisible(false);
            } else {
                btnEfectuar.setVisible(true);
            }
        }
    }                                  

    /**
     * Método que hace la busqueda, comparando el texto ingresado y el tipo con los que se tenga en la base de datos.
     * @param texto es el nombre de lo que se este buscando.
     * @param tipo es la variable del modelo seleccionado. (Documentos, Quizzes, Empleados)
     */
    private void busqueda(String texto, String tipo) {
        try {
            if (tipo.equals("Documentos")) {
                DefaultTableModel modelo = new DefaultTableModel() {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false; //Bloquea la edision.
                    }
                };
                tabla.setModel(modelo);

                PreparedStatement ps = null;
                ResultSet rs = null;
                ModConexion mod = new ModConexion();
                Connection con = mod.getConexion();

                String filtro = "" + texto + "_%";
                String sql = "SELECT nombre, status, descripcion FROM documentos WHERE nombre LIKE " + '"' + filtro + '"';//order by nombre"
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();

                ResultSetMetaData rsMd = rs.getMetaData();
                int cantidadColumnas = rsMd.getColumnCount();

                modelo.addColumn("Nombre");
                modelo.addColumn("Status");
                modelo.addColumn("Descripción");

                while (rs.next()) {
                    Object[] filas = new Object[cantidadColumnas];

                    for (int i = 0; i < cantidadColumnas; i++) {
                        filas[i] = rs.getObject(i + 1);
                    }

                    modelo.addRow(filas);
                }
            }
            if (tipo.equals("Empleados")) {
                DefaultTableModel modelo = new DefaultTableModel() {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false; //Bloquea la edision.
                    }
                };
                tabla.setModel(modelo);

                PreparedStatement ps = null;
                ResultSet rs = null;
                ModConexion mod = new ModConexion();
                Connection con = mod.getConexion();

                String filtro = "" + texto + "_%";
                String sql = "SELECT matricula, nombre, ap_pat, ap_mat, correo, tipo FROM usuarios WHERE (matricula LIKE " + '"' + filtro + '"' + " "
                        + "OR nombre LIKE " + '"' + filtro + '"' + " OR ap_pat LIKE " + '"' + filtro + '"' + " OR ap_mat LIKE " + '"' + filtro + '"' + ")";//order by nombre"
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();

                ResultSetMetaData rsMd = rs.getMetaData();
                int cantidadColumnas = rsMd.getColumnCount();

                modelo.addColumn("Matrícula");
                modelo.addColumn("Nombre");
                modelo.addColumn("Apellido Paterno");
                modelo.addColumn("Apellido Materno");
                modelo.addColumn("Correo");
                modelo.addColumn("Tipo");

                while (rs.next()) {
                    Object[] filas = new Object[cantidadColumnas];

                    for (int i = 0; i < cantidadColumnas; i++) {
                        filas[i] = rs.getObject(i + 1);
                    }

                    modelo.addRow(filas);
                }
            }
            if (tipo.equals("Quizzes")) {
                DefaultTableModel modelo = new DefaultTableModel() {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false; //Bloquea la edision.
                    }
                };
                tabla.setModel(modelo);

                PreparedStatement ps = null;
                ResultSet rs = null;
                ModConexion mod = new ModConexion();
                Connection con = mod.getConexion();

                String filtro = "" + texto + "_%";
                String sql = "SELECT nombre, descripcion, status, p_totales, p_actuales, f_registro, f_activacion FROM quizzes WHERE nombre LIKE " + '"' + filtro + '"';//order by nombre"
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();

                ResultSetMetaData rsMd = rs.getMetaData();
                int cantidadColumnas = rsMd.getColumnCount();

                modelo.addColumn("Nombre");
                modelo.addColumn("Descripción");
                modelo.addColumn("Status");
                modelo.addColumn("#PregTot");
                modelo.addColumn("#PregAct");
                modelo.addColumn("FRegistro");
                modelo.addColumn("FActivado");

                while (rs.next()) {
                    Object[] filas = new Object[cantidadColumnas];

                    for (int i = 0; i < cantidadColumnas; i++) {
                        filas[i] = rs.getObject(i + 1);
                    }

                    modelo.addRow(filas);
                }
            }
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VstBuscador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VstBuscador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VstBuscador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VstBuscador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VstBuscador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    public javax.swing.JTextField TEMP;
    public javax.swing.JButton btnEfectuar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbFormat;
    private javax.swing.JLabel lbNombre;
    public javax.swing.JTable tabla;
    public javax.swing.JComboBox<String> tipo;
    public javax.swing.JTextField txtFormat;
    public javax.swing.JTextField txtNombre;
    // End of variables declaration                   
}
